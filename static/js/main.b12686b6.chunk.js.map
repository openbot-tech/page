{"version":3,"sources":["images/svg/Openbot_black.svg","images/svg/discord.svg","images/svg/github.svg","images/svg/stack.svg","images/svg/test.svg","images/png/traders.png","images/png/developers.png","images/png/tradingscreen.png","images/svg/twitter.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","id","src","Openbotpic","alt","class","href","tradingscreen","githubpic","discordpic","stackpic","testpic","traderspic","devspic","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b12686b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Openbot_black.e8208c90.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.f10eba06.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.76d344f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/stack.229b813a.svg\";","module.exports = __webpack_public_path__ + \"static/media/test.3cb44f0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/traders.cb59220a.png\";","module.exports = __webpack_public_path__ + \"static/media/developers.04b00104.png\";","module.exports = __webpack_public_path__ + \"static/media/tradingscreen.0c30ca1f.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.28ca8de7.svg\";","import React, { Component } from 'react';\r\nimport Openbotpic from './images/svg/Openbot_black.svg';\r\nimport twitterpic from './images/svg/twitter.svg';\r\nimport discordpic from './images/svg/discord.svg';\r\nimport githubpic from './images/svg/github.svg';\r\nimport stackpic from './images/svg/stack.svg';\r\nimport testpic from './images/svg/test.svg';\r\nimport traderspic from './images/png/traders.png';\r\nimport devspic from './images/png/developers.png';\r\nimport tradingscreen from './images/png/tradingscreen.png';\r\nimport { ButtonToolbar, Button } from 'react-bootstrap';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <div id=\"navbar\">\r\n        <img src={Openbotpic} id=\"banner-img\" alt=\"Openbot logo\"/>\r\n        <ul class=\"nav-links\">\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Features</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Strategies</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Governance</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Documentation</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Install</a></li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"Header Section\">\r\n        <div className=\"Header-lead\">\r\n          <h1>Crowd-sourced <br /> crypto trading bots</h1>\r\n          <h3 className=\"Header-text\">Submit strategies or implement new features, <br /> the first openbot virtual hackathon is live</h3>\r\n          <a className=\"Button-simple\" href=\"https://openbot.gitbook.io/project/\">Gitcoin Bounties</a>\r\n        </div>\r\n        <div className=\"App-list\">\r\n          <a className=\"App-link\" href=\"https://discord.gg/6d4v6YC\">\r\n            <img src={tradingscreen} id=\"tradingscreen\" alt=\"tradingbot in action\"/>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <fieldset>\r\n      <legend>FEATURES</legend>\r\n      <div className=\"Features Section\">\r\n        <div className=\"App-list\">\r\n          <a className=\"App-link\" href=\"https://github.com/openbot-tech\">\r\n            <img src={githubpic} id=\"logos\" alt=\"github\"/>\r\n          </a>\r\n          <div className=\"App-text\">\r\n            <h3>Open-Source</h3>\r\n            <p className=\"description-text\">All code is open source, <br /> freely available on Github</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"App-list\">\r\n          <a className=\"App-link\" href=\"https://discord.gg/6d4v6YC\">\r\n            <img src={discordpic} id=\"logos\" alt=\"discord\"/>\r\n          </a>\r\n          <div className=\"App-text\">\r\n            <h3>Crowd-sourced</h3>\r\n            <p className=\"description-text\">Openbot is developer by a distributed <br /> and passionate trading community</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"App-list\">\r\n          <a className=\"App-link\" href=\"https://twitter.com/openbot_tech\">\r\n          <img src={stackpic} id=\"logos\" alt=\"twitter\"/>\r\n          </a>\r\n          <div className=\"App-text\">\r\n            <h3>Work in progress</h3>\r\n            <p className=\"description-text\">Trendfollowing is just the beginning, <br /> feel free to add your own component</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"App-list\">\r\n          <a className=\"App-link\" href=\"https://twitter.com/openbot_tech\">\r\n          <img src={testpic} id=\"logos\" alt=\"twitter\"/>\r\n          </a>\r\n          <div className=\"App-text\">\r\n            <h3>Full test coverage</h3>\r\n            <p className=\"description-text\">Openbot has enterprise-grade unit, <br /> integration and end-to-end tests</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </fieldset>\r\n\r\n      <fieldset>\r\n      <legend>CONTRIBUTE</legend>\r\n        <div className=\"Contribute Section\">\r\n          <div className=\"Contribute-box\">\r\n            <h2>Traders</h2>\r\n            <a className=\"Contribute-img\" href=\"https://discord.gg/6d4v6YC\">\r\n              <img src={traderspic} id=\"pics\" alt=\"github\"/>\r\n            </a>\r\n            <br />\r\n            <a className=\"Button-simple\" href=\"https://discord.gg/6d4v6YC\">Submit Strategy</a>\r\n          </div>\r\n          <div className=\"Contribute-box\">\r\n            <h2>Developers</h2>\r\n            <a className=\"Contribute-img\" href=\"https://github.com/openbot-tech\">\r\n              <img src={devspic} id=\"pics\" alt=\"discord\"/>\r\n            </a>\r\n            <br />\r\n            <a className=\"Button-simple\" href=\"https://github.com/openbot-tech\">View Codebase</a>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <fieldset>\r\n      <legend>VISION</legend>\r\n        <div className=\"Vision Section\">\r\n          <div>\r\n            <h1>Towards a decentralized tradingbot community</h1>\r\n            <p id=\"text\">Join us discussing & developing free, open-source trading algorithms.</p>\r\n            <a className=\"Button-simple\" href=\"https://openbot.gitbook.io/project/\">Vision Paper</a>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n\r\n      <div id=\"footer\">\r\n        <ul class=\"nav-links\">\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Features</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Strategies</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Governance</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Documentation</a></li>\r\n          <li class=\"nav-item\"><a href=\"https://openbot.gitbook.io/project/\">Install</a></li>\r\n        </ul>\r\n      </div>\r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}